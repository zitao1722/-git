spring:
  application:
    name: seata-product
  cloud:
    nacos:
      server-addr: http://8.134.144.240:8848
      discovery:
        username: nacos
        password: nacos
        namespace: 22af6add-e59e-45b8-a73f-0b57860a248a
        group: SEATA_GROUP
    inetutils:
      preferred-networks: 192.168.0
  datasource:
    url: jdbc:mysql://8.134.144.240:3306/seata_product?serverTimezone=GMT%2B8&useSSL=true
    username: root
    password: Zitao_1722
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      #   数据源其他配置
      #初始化时建立物理连接的个数
      initial-size: 5
      #最小连接池数量
      min-idle: 5
      #最大连接池数量 maxIdle已经不再使用
      max-active: 20
      #获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      #既作为检测的间隔时间又作为testWhileIdel执行的依据
      time-between-eviction-runs-millis: 60000
      #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
      min-evictable-idle-time-millis: 30000
      #用来检测连接是否有效的sql 必须是一个查询语句
      #mysql中为 select 'x'
      #oracle中为 select 1 from dual
      validation-query: select 'x'
      #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      # 是否缓存preparedStatement
      pool-prepared-statements: true
      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      #配置监拉统计挡成的filters. stat: 监控统计、Log4j:日志记录、waLL: 防御sqL注入
      #如果启用日志记录时报错java.lang.ClassNotFoundException: org.apache.log4j.Priority
      #则导入Log4j 依赖即时，Maven 地址: https://mvnrepository. com/artifact/log4j/log4
      filters: stat,wall,1og4j
      max-pool-prepared-statement-per-connection-size: 20
      use-global-data-source-stat: true

  # 指定数据库的sql文件位置，并设置在初始化数据库时运行此文件(mode: always)，never是从不运行
  # 也可以不使用这样的方法，直接在数据库中运行sql文件建表
  sql:
    init:
      schema-locations: sql/seata-product.sql
      mode: never
#      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000


mybatis:
  mapper-locations: classpath:mapper/*.xml
  # 扫描实体类的位置,在此处指明扫描实体类的包，在 mapper.xml 中就可以不写实体类的全路径名
  type-aliases-package: com.zitao.seata.entity
  configuration:
    #默认开启驼峰命名法，可以不用设置该属性
    map-underscore-to-camel-case: true

# 配置事务的分组
# 旧版本的是 spring.cloud.alibaba.seata.tx-service-group
# 要求之前在nacos配置了 service.vgroupMapping.default_tx_group
seata:
  tx-service-group: default_tx_group
  registry:
    # 配置seata的注册中心，告诉seata client（即我们的微服务）怎么去访问 seata server(TC)
    type: nacos
    nacos:
      server-addr: http://8.134.144.240:8848  # 配置 seata 时设置的注册中心nacos的地址
      application: seata-server  # seata 服务端名称
      username: nacos
      password: nacos
      namespace: 22af6add-e59e-45b8-a73f-0b57860a248a
      group: SEATA_GROUP  # 配置 seata 时，seata-server 服务的分组
  config:
    type: nacos
    nacos:
      server-addr: http://8.134.144.240:8848  # 配置 seata 时设置的配置中心nacos的地址
      username: nacos
      password: nacos
      namespace: 22af6add-e59e-45b8-a73f-0b57860a248a
      group: SEATA_GROUP  # 配置 seata 时，seata 各配置项的分组


server:
  port: 8032